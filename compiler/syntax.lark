%import common.NUMBER
%import common.CNAME
%import common.NEWLINE
%import common.WS

%ignore WS

COMMENT: "/*" /(.|\\n|\\r)+/ "*/"
    |  "//" /(.)+/ NEWLINE
%ignore COMMENT

ADD:     "+"
SUB:     "-"
MUL:     "*"
DIV:     "/"
MOD:     "%"
AND:     "&&"
OR:      "||"
BIT_AND: "&"
BIT_OR:  "|"
GE:      ">="
LE:      "<="
NEQUALS: "!="
EQUALS:  "=="
GT:      ">"
LT:      "<"

ARR:     "[]"
TRUE:    "True"
FALSE:   "False"

num: NUMBER -> literal
char: /'.'/ -> literal
bool: (TRUE|FALSE)  -> literal

ident: CNAME
array_elem: ident "[" expr "]"

?group: num | char | bool
    | ident
    | array_elem
    | call
    | "(" expr ")"

call:  ident "(" ( expr ( "," expr )* )? ")"

?mult: group
    | mult ( MUL | DIV | MOD) group  -> bin_op

?add: mult
    | add ( ADD | SUB ) mult  -> bin_op

?compare1: add
    | compare1 ( GT | LT | GE | LE ) add  -> bin_op

?compare2: compare1
    | compare2 ( EQUALS | NEQUALS ) compare1  -> bin_op

?logical_and: compare2
    | logical_and AND compare2  -> bin_op

?logical_or: logical_and
    | logical_or OR logical_and  -> bin_op

?expr: logical_or

?var_decl_inner: ident
    | ident "=" expr  -> assign

vars_decl: ident var_decl_inner ( "," var_decl_inner )*
    | array_decl "=" expr -> assign

array_decl: ident ident "[" expr "]"

?simple_stmt: ident "=" expr  -> assign
    | call
    | array_elem "=" expr -> assign
    | expr

?for_stmt_list: vars_decl
    | ( simple_stmt ( "," simple_stmt )* )?  -> stmt_list

?for_cond: expr
    |   -> stmt_list

?body: stmt
    | ";"  -> stmt_list

?param: ident ident (ARR)?

params_list: (param ( "," param )*)?

return_type: ident | (ident ARR)

function: return_type ident "(" params_list ")" "{" stmt_list "}"

?stmt: ";" -> stmt_list
    | "while" "(" expr ")" body -> while
    | vars_decl ";"
    | "if" "(" expr ")" body -> if
    | "if" "(" expr ")" body "else" body  -> if
    | "for" "(" for_stmt_list ";" for_cond ";" for_stmt_list ")" body  -> for
    | "{" stmt_list "}"
    | simple_stmt ";"
    | function
    | array_decl ";"
    | "return" expr? ";" -> return

stmt_list: stmt*

?prog: stmt_list

?start: prog