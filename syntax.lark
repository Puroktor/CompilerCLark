%import common.NUMBER
%import common.ESCAPED_STRING
%import common.CNAME
%import common.NEWLINE
%import common.WS

%ignore WS

COMMENT: "/*" /(.|\\n|\\r)+/ "*/"
    |  "//" /(.)+/ NEWLINE
%ignore COMMENT

INT:        "int"
CHAR:       "char"
STRING:     "string"
BOOLEAN:    "boolean"
DOUBLE:     "double"
VOID:       "void"

TRUE:       "True"
FALSE:      "False"
ESCAPED_CHAR: "\'" /./ "\'"

num: NUMBER  -> literal
char: ESCAPED_CHAR  -> literal
str: ESCAPED_STRING  -> literal
bool: (TRUE|FALSE)  -> literal

simple_type: INT | CHAR | STRING | BOOLEAN | DOUBLE
array_type: simple_type "[" "]"
type: simple_type | array_type | delegate

ADD:     "+"
SUB:     "-"
MUL:     "*"
DIV:     "/"
MOD:     "%"
AND:     "&&"
OR:      "||"
BIT_AND: "&"
BIT_OR:  "|"
GE:      ">="
LE:      "<="
NEQUALS: "!="
EQUALS:  "=="
GT:      ">"
LT:      "<"

ident: CNAME
call: ident "(" ( expr ( "," expr )* )? ")"

type_list: (type ("," type)*)?
?delegate: "delegate" "<" type_list ":" func_return_type ">"

array_element: simple_type "[" expr "]"

?group: num | char| str | bool
    | ident
    | array_element
    | call
    | "(" expr ")"

?mult: group
    | mult ( MUL | DIV |  MOD) group  -> bin_op

?add: mult
    | add ( ADD | SUB ) mult  -> bin_op

?compare1: add
    | add ( GT | LT | GE | LE ) add  -> bin_op

?compare2: compare1
    | compare1 ( EQUALS | NEQUALS ) compare1  -> bin_op

?logical_and: compare2
    | logical_and AND compare2  -> bin_op

?logical_or: logical_and
    | logical_or OR logical_and  -> bin_op

?expr: logical_or

?expr_list: "{" expr ( "," expr )* "}"

?var_decl_inner: ident | ident "=" expr  -> assign

?array_decl: simple_type "[" expr "]"

?var_array_decl_inner: ident | ident "=" expr_list  -> assign

?vars_decl: (simple_type |delegate) var_decl_inner ( "," var_decl_inner )*
    | array_decl var_array_decl_inner ( "," var_array_decl_inner )*

?vars_decl_list: (vars_decl ";")*

?simple_stmt: ident "=" expr  -> assign
    | array_element "=" expr -> assign
    | call

?for_stmt_list: vars_decl
    | ( simple_stmt ( "," simple_stmt )* )?  -> stmt_list
?for_cond: expr
    |   -> stmt_list
?loop_body: stmt
    | ";"  -> stmt_list

?func_param: type ident
?func_params: (func_param ("," func_param)*)?
?func_return_type: type | VOID

?stmt: ";" -> stmt_list
    | vars_decl ";"
    | simple_stmt ";"
    | "if" "(" expr ")" stmt ("else" stmt)?  -> if
    | "for" "(" for_stmt_list ";" for_cond ";" for_stmt_list ")" loop_body  -> for
    | "while" "(" expr ")" loop_body -> while
    | func_return_type ident "(" func_params ")" "{" stmt_list "}" -> func
    | "return" expr -> return
    | "{" stmt_list "}"

stmt_list: ( stmt ";"* )*

?prog: stmt_list

?start: prog